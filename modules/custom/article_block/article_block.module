<?php

/**
 * Implements hook_help().
 */
function article_block_help($path, $arg) {
  switch ($path) {
    case 'admin/config/other/article_block':
      return '<p>' . t('Test test tets tsetts') . '</p>';

    case 'admin/help#article_block':
      $output = '';
      $output .= '<p>' . t('The administration menu module provides a dropdown menu arranged for one- or two-click access to most administrative tasks and other common destinations (to users with the proper permissions). Administration menu also displays the number of anonymous and authenticated users, and allows modules to add their own custom menu items. Integration with the menu varies from module to module; the contributed module <a href="@drupal">Devel</a>, for instance, makes strong use of the administration menu module to provide quick access to development tools.', array('@drupal' => 'http://drupal.org/project/devel')) . '</p>';
      $output .= '<p>' . t('The administration menu <a href="@settings">settings page</a> allows you to modify some elements of the menu\'s behavior and appearance. Since the appearance of the menu is dependent on your site theme, substantial customizations require modifications to your site\'s theme and CSS files. See the advanced module README.txt file for more information on theme and CSS customizations.', array('@settings' => url('admin/config/administration/admin_menu'))) . '</p>';
      $output .= '<p>' . t('The menu items displayed in the administration menu depend upon the actual permissions of the viewer. First, the administration menu is only displayed to users in roles with the <em>Access administration menu</em> (admin_menu module) permission. Second, a user must be a member of a role with the <em>Access administration pages</em> (system module) permission to view administrative links. And, third, only currently permitted links are displayed; for example, if a user is not a member of a role with the permissions <em>Administer permissions</em> (user module) and <em>Administer users</em> (user module), the <em>User management</em> menu item is not displayed.') . '</p>';
      return $output;
  }
}


function article_block_menu() {
  $items['admin/config/content/article_block'] = [
    'title' => 'Article block Settings',
    'description' => 'Administer the Article Block settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('article_block_settings_form'),
    'access arguments' => array('manage article block settings'),
    'file' => 'article_block.admin.inc'
  ];

  $items['admin/reports/article_block'] = [
    'title' => 'Article Block Post',
    'description' => 'View all  the Article posts',
    'page callback' => 'article_block_posts',
    'access arguments' => array('view article block posts'),
    'file' => 'article_block.admin.inc',
  ];

  return $items;
}

function article_block_permission() {
  return [
    'view article block posts' => [
      'title' => t('View Article Block Posts'),
      'description' => t('View Article Block Posts.'),
    ],
    'manage article block settings' => [
      'title' => t('Manage Article Block Settings'),
      'description' => t('Allow users to manage Article Block settings page.'),
    ]
  ];
}



/**
 * Implements hook_form_alter().
 * normal article_block_form_alter()
 * moduleName_form_formId_alter
 */
function article_block_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $types = variable_get('article_block_types',[]);

  //check if this node type is enabled in setting for this bundle
  //and that user has access to settings


  if ($types[$node->type] && user_access('manage article block settings')) {
    //add the new fieldset with a checkbox for per node settings
    $form['article_block'] = [
      '#title' => t('Article Block'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#group' => 'additional_settings'
    ];
    $form['article_block']['article_block_enabled'] = [
      '#title' => t('Allow this node to be posted to the block'),
      '#type' => 'checkbox',
      '#default_value' => isset($node->article_block_enabled) ? $node->article_block_enabled: false
    ];
  }
}

/**
 * Implements hook_node_load().
 */
function article_block_node_load($nodes, $types) {

  foreach ($nodes as $nid => $node) {
    $node->article_block_enabled = article_block_get_node_enabled($node->nid);
  }

}

/**
 * Implements hook_node_insert().
 */
function article_block_node_insert($node) {
  //sprawdz pole checkobox i jesli jest zaznaczony wtedy zrob insert do tabeli article_block_enabled
  if ($node->article_block_enabled) {
    article_block_set_node_enabled($node->nid);
  }
}

/**
 * Implements hook_node_update().
 */
function article_block_node_update($node) {
  //usun z tabeli article_block_enabled nid i sprawdz checkbox i jesli jest zaznaczony to zrob insert do tabeli article_block_enabled
  article_block_delete_node_enabled($node->nid);

  if ($node->article_block_enabled) {
    article_block_set_node_enabled($node->nid);
  }

}

/**
 * Implements hook_node_delete().
 */
function article_block_node_delete($node) {
  article_block_delete_node_enabled($node->nid);
}


/**
 * @param $nid
 *
 * @return boolean
 */
function article_block_get_node_enabled($nid) {
  if (is_numeric($nid)) {
    //return string nodeId 61 or false
    $result = db_query("SELECT nid FROM {article_block_enabled} WHERE nid = :nid",['nid'=>$nid])->fetchField();

    if ($result) {
      return true;
    }
    return false;
  }
}


/**
 * Add entry's for a node
 */
function article_block_set_node_enabled($nid) {
  if (is_numeric($nid)) {

    if (!article_block_get_node_enabled($nid)) {
        db_insert('article_block_enabled')
        ->fields(['nid'=>$nid])
        ->execute();
    }
  }
}


function article_block_delete_node_enabled($nid) {
  if (is_numeric($nid)) {
    db_delete('article_block_enabled')
      ->condition('nid',$nid)
      ->execute();
  }
}



/**
 * block hooks
 */
/**
 * Implements hook_block_info().
 */
function article_block_block_info() {
  // This example comes from node.module.
  $blocks['posts'] = [
    'info' => t('Article Block'),
    'cache' => DRUPAL_NO_CACHE
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function article_block_block_view($delta = '') {

  switch ($delta) {
    case 'posts':
      $block['subject'] = t('Article Block Posts');
      $block['content'] = article_block_block_contents($delta);
      return $block;
      break;
  }

}

function article_block_block_contents($delta = '') {
  switch ($delta) {
    case 'posts':
      if (user_access('access content')) {
        $result = db_query("select nid,title,type from {node} where type = 'article'");
        $items = [];
        foreach ($result as $row) {

          $items[] = l($row->title,'node/'.$row->nid.'/');
        }
        
        return ['#markup' => theme('item_list',['items'=>$items])];
      }
  }
}